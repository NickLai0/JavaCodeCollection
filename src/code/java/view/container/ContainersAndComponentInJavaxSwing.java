package code.java.view.container;


/**
 * Components
 * In general, Swing components are derived from the JComponentclass. (The only exceptions to this are the four top-level containers, described in the next section.) JComponentprovides the functionality that is common to all components. For example, JComponentsupports the pluggable look and feel. JComponentinherits the AWT classes Containerand Component. Thus, a Swing component is built on and compatible with an AWT component.
 * All of Swing’s components are represented by classes defined within the package javax.swing. The following table shows the class names for Swing components (including those used as containers):
 * Notice that all component classes begin with the letter J. For example, the class for a label is JLabel, the class for a push button is JButton, and the class for a check box is JCheckBoxThis chapter introduces five commonly used components: JLabel, JButton, JTextField, JCheckBox, and JList. Once you understand their basic operation, it will be easy for you to learn to use the others.
 * Containers
 * Swing defines two types of containers. The first are top-level containers: JFrame, JApplet, JWindow, and JDialog. (JApplet, which supports Swing-based applets, has been deprecated since JDK 9.) These containers do not inherit JComponent. They do, however, inherit the AWT classes Componentand Container. Unlike Swing’s other components, which are lightweight, the top-level containers are heavyweight. This makes the top-level containers a special case in the Swing component library.
 * As the name implies, a top-level container must be at the top of a containment hierarchy. A top-level container is not contained within any other container. Furthermore, every containment hierarchy must begin with a top-level container. The one most commonly used for applications is JFrame
 * The second type of container supported by Swing is the lightweight container. Lightweight containers doinherit JComponent. Examples of lightweight containers are JPanel, JScrollPane, and JRootPane. Lightweight containers are often used to collectively organize and manage groups of related components because a lightweight container can be contained within another container. Thus, you can use lightweight containers to create subgroups of related controls that are contained within an outer container.
 * The Top-Level Container Panes
 * Each top-level container defines a set of panes.At the top of the hierarchy is an instance of JRootPaneJRootPaneis a lightweight container whose purpose is to manage the other panes. It also helps manage the optional menu bar. The panes that compose the root pane are called the glass pane,the content pane,and the layered pane.
 * The glass pane is the top-level pane. It sits above and completely covers all other panes. The glass pane enables you to manage mouse events that affect the entire container (rather than an individual control) or to paint over any other component, for example. In most cases, you won’t need to use the glass pane directly. The layered pane allows components to be given a depth value. This value determines which component overlays another. (Thus, the layered pane lets you specify a Z-order for a component, although this is not something that you will usually need to do.) The layered pane holds the content pane and the (optional) menu bar. Although the glass pane and the layered panes are integral to the operation of a top-level container and serve important purposes, much of what they provide occurs behind the scene.
 * The pane with which your application will interact the most is the content pane, because this is the pane to which you will add visual components. In other words, when you add a component, such as a button, to a top-level container, you will add it to the content pane. Therefore, the content pane holds the components that the user interacts with.
 * Layout Managers
 * Before you begin writing a Swing program, there is one more thing that you need to be aware of: the layout manager.The layout manager controls the position of components within a container. Java offers several layout managers. Most are provided by the AWT (within java.awt), but Swing adds a few of its own. All layout managers are instances of a class that implements the LayoutManagerinterface. (Some will also implement the LayoutManager2interface.) Here is a list of a few of the layout managers available to the Swing programmer:
 * Frankly, the topic of layout managers is quite large, and it is not possible to examine it in detail in this book. Fortunately, this chapter uses only two layout managers—BorderLayoutand FlowLayout—and both are very easy to use.
 * BorderLayoutis the default layout manager for the content pane. It implements a layout style that defines five locations to which a component can be added. The first is the center. The other four are the sides (i.e., borders), which are called north, south, east, and west. By default, when you add a component to the content pane, you are adding the component to the center. To add a component to one of the other regions, specify its name.
 * Although a border layout is useful in some situations, often another, more flexible layout manager is needed. One of the simplest is FlowLayout. A flow layout lays out components one row at a time, top to bottom. When one row is full, layout advances to the next row. Although this scheme gives you little control over the placement of components, it is quite simple to use. However, be aware that if you resize the frame, the position of the components will change.
 * A First Simple Swing Program
 * Swing programs differ from the console-based programs shown earlier in this book. Not only do Swing programs use the Swing component set to handle user interaction, but they also have special requirements that relate to threading. The best way to understand the structure of a Swing program is to work through an example.
 * NOTE
 * The type of Swing programs shown in this chapter are desktop applications. In the past, Swing was also used to create applets. However, applets have been deprecated by JDK 9 and are not recommended for new code. For this reason, they are not discussed in this book.
 * Although quite short, the following program shows one way to write a Swing application. In the process it demonstrates several key features of Swing. It uses two Swing components: JFrameand JLabelJFrameis the top-level container that is commonly used for Swing applications. JLabelis the Swing component that creates a label, which is a component that displays information. The label is Swing’s simplest component because it is passive. That is, a label does not respond to user input. It just displays output. The program uses a JFramecontainer to hold an instance of a JLabel. The label displays a short text message.
 */
public class ContainersAndComponentInJavaxSwing {
}
